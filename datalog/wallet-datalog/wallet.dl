// Contract APIs
// Transactions
.decl transfer(from: address, to: address, amount: number) tx
.decl mint(p: address, amount: number) tx
.decl burn(p: address, amount: number) tx

// Views
.decl balanceOf(p: address): number view
.decl totalSuuply(): number view

.decl owner(): address view

.decl construct(p:address)
// Initialization: built-in relation when a contract
// is constructed, with the parameters.
owner(sender) :- construct(sender).

// Rules and their auxiliary relations
.decl totalMint(p: address)
.decl totalBurnt(p: address)

totalMint(s) :- s = sum v: mint(_, v).
totalBurnt(s) :- s = sum v: burn(_,v).

totalSupply(s) :- totalMint(m), totalBurnt(b), 
                  s = m - b.

// balance
.decl recv(p:address,n:uint)
.decl sent(p:address,n:uint)
.decl recvTotal(p:address,n:uint)
.decl sentTotal(p:address,n:uint)

recv(v,s) :- mint(v, s).
recv(v,s) :- transfer(_, v, s).
sent(v,s) :- burn(v,s).
sent(v,s) :- transfer(v, _,s).

recvTotal(v, s) :- recv(v, _), s = sum m: recv(v,m).
sentTotal(v, s) :- sent(v, _), s = sum m: sent(v,m).

balanceOf(v, m) :- recvToal(v, r), sentTotal(v, s), 
                   m = r - s.


// Transctions
commit send(tx, rx, n) :- recv transfer(tx, rx, n), 
                        balanceOf(tx, m), m >= n.

commit burn(p, n) :- recv burn(p, n), balanceOf(p, m), 
                        msgSender(ms), owner(o),
                        ms = o, m >= n.

commit mint(p, n) :- recv mint(p, n), owner(p), n!=0.
